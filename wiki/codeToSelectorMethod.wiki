= `codeToSelector` =
[http://code.google.com/p/querytemplates/w/list Wiki] > [Syntax Syntax] > [codeToSyntax codeTo] > [codeToSelectorMethod codeToSelector]
=== Parameters ===
 * *$codeArray* _String_
  Array of raw code, where key is the field.
 * *$selectorPattern* _String_ = `'.%k'`
  Defines pattern matching target nodes. %k represents key.  Defaults to `".%k"`, which matches nodes with class name equivalent to  variables key (field).  For example, to restrict match to nodes with additional class `"foo"` change  $selectorPattern to `".foo.%k"`
 * *$skipFields* _Array_ = `null`
  Array of keys from $varValue which should be skipped.
 * *$fieldCallback* _Callback|string_ = `null`
  Callback triggered after every insertion. Three parameters are passed to  this callback: 
   * phpQueryObject $node
   * string $field
   * string|array $target


Injects raw executable code inside nodes matched by selector. Method uses  actually matched elements as root for the query.


Method doesn't change selected elements stack.


== Example ==


=== Markup ===
{{{
 <p class='field1'>lorem ipsum</p>
 <p class='field2'>lorem ipsum</p>

}}}
=== Formula ===
{{{
 $code = array(
   'field1' => 'print "abba";',
   'field2' => 'foreach(array(1, 2, 3) as $i) print $i'
 );
 $template['node1']->codeToSelector($code);

}}}
=== Template ===
{{{
 <p class="field1"><?php  print "abba";  ?></p>
 <p class="field2"><?php  foreach(array(1, 2, 3) as $i) print $i  ?></p>

}}}
----

== See also ==
 * [varsToStackMethod varsToStack]


=== Comments allowed ===