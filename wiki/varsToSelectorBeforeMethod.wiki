= varsToSelectorBefore =
[http://code.google.com/p/querytemplates/w/list Wiki] > [Syntax Syntax] > [varsToSyntax varsTo] > [varsToSelectorBeforeMethod varsToSelectorBefore]
=== Parameters ===
 * *$varName* _String_
  Variable avaible in scope of type Array or Object.  $varName should NOT start with $.
 * *$varFields* _Array|Object_
  Variable value with all fields (keys) OR array of variable fields (keys).
 * *$selectorPattern* _String_ = '.%k'
  Defines pattern matching target nodes. %k represents key.  Defaults to ".%k", which matches nodes with class name equivalent to  variables key (field).  For example, to restrict match to nodes with additional class "foo" change  $selectorPattern to ".foo.%k"
 * *$skipFields* _Array_ = null
  Array of keys from $varValue which should be skipped.
 * *$fieldCallback* _Callback|string_ = null
  Callback triggered after every insertion. Three parameters are passed to  this callback: 
   * phpQueryObject $node
   * string $field
   * string|array $target


Injects executable code printing variable's fields before nodes matched by  selector. Method uses actually matched elements as root for the query.
Method doesn't change selected elements stack.
== Example ==
=== Markup ===  
{{{
 <p class='field1'>lorem ipsum</p>
 <p class='field2'>lorem ipsum</p>

}}}
=== Formula ===  
{{{
 $foo = array('field1' => 'foo', 'field2' => 'bar');
 $template->varsToSelectorBefore('foo', $foo);

}}}
=== Template ===  
{{{
 <?php  if (isset($foo['field1'])) print $foo['field1'];
 else if (isset($foo->{'field1'})) print $foo->{'field1'};  ?><p class="field1">lorem ipsum</p>
 <?php  if (isset($foo['field2'])) print $foo['field2'];
 else if (isset($foo->{'field2'})) print $foo->{'field2'};  ?><p class="field2">lorem ipsum</p>

}}}
----

== See also ==
 * [varsToStackMethod varsToStack]
 * [varsToFormMethod varsToForm]


=== Comments allowed ===