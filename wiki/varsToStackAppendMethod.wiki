#sidebar SyntaxSidebar
= `varsToStackAppend` =
[http://code.google.com/p/querytemplates/w/list Wiki] > [Syntax Syntax] > [varsToSyntax varsTo] > [varsToStackAppendMethod varsToStackAppend]
=== Parameters ===
 * *$varName* _String_
  Variable avaible in scope of type Array or Object.  $varName should NOT start with $.
 * *$varFields* _Array|Object_
  Variable value with all fields (keys) OR array of variable fields (keys).  Param needs to be passed thou array_keys for non-assosiative arrays.
 * *$skipFields* _Array_ = `null`
  Array of keys from $varValue which should be skipped.
 * *$fieldCallback* _Callback|string_ = `null`
  Callback triggered after every insertion. Three parameters are passed to  this callback: 
   * phpQueryObject $node
   * string $field
   * string|array $target


=== Description ===
Injects executable code printing variable's fields at the end of actually  matched nodes. Second param needs to be wrapped with array_keys for  non-assosiative arrays.


Method doesn't change selected elements stack.


== Example ==


=== Markup ===
{{{
 <node1>
   <node2></node2>
 </node1>
 <node2></node2>
 <node1>
   <node2></node2>
 </node1>

}}}
=== Formula ===
{{{
 $foo = array('<foo/>', '<bar/>');
 $template['node1']->varsToStackAppend('foo', array_keys($foo));

}}}
=== Template ===
{{{
 <node1><node2></node2><?php  if (isset($foo['0'])) print $foo['0'];
 else if (isset($foo->{'0'})) print $foo->{'0'};  ?></node1><node2></node2><node1><node2></node2><?php  if (isset($foo['1'])) print $foo['1'];
 else if (isset($foo->{'1'})) print $foo->{'1'};  ?></node1>

}}}
=== Template tree ===
{{{
 node1
  - node2
  - PHP
 node2
 node1
  - node2
  - PHP

}}}
----

== See also ==
 * [varsToSelectorMethod varsToSelector]
 * [varsToFormMethod varsToForm]


=== Comments allowed ===